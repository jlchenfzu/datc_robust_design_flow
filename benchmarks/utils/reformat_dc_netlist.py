'''
    File name      : reformat_dc_netlist.py
    Author         : Jinwook Jung
    Created on     : Wed 01 Aug 2018 05:05:32 PM KST
    Last modified  : 2018-08-01 17:05:32
    Description    :
'''

from time import gmtime, strftime

def read_verilog(src, dest):
    lines = [_ for _ in (l.strip() for l in open(src)) if _]
    new_lines = list()

    lines_iter = iter(lines)
    for l in lines_iter:
        if l.startswith("//"):
            continue

        if l.endswith(";") or l == "endmodule":
            new_lines.append(l)
        else:
            new_line = l
            while True:
                line = next(lines_iter)

                if new_line.endswith("("):
                    new_line += line
                else:
                    new_line += " " + line

                if line.endswith(";"):
                    break

            new_lines.append(new_line)

    # Get inputs and outputs
    input_str, output_str, wire_str = new_lines[1], new_lines[2], new_lines[3]
    input_str = input_str.replace(",", " ")
    input_str = input_str.replace(";", " ")
    output_str = output_str.replace(",", " ")
    output_str = output_str.replace(";", " ")
    wire_str = wire_str.replace(",", " ")
    wire_str = wire_str.replace(";", " ")

    inputs = sorted(input_str.split()[1:])
    outputs = sorted(output_str.split()[1:])
    wires = sorted(wire_str.split()[1:])

    module_name = new_lines[0].split()[1]

    with open(dest, 'w') as f:
        f.write("// Author: Jinwook Jung (jinwookjungs@gmail.com)\n")
        f.write("// Created at %s\n" % (strftime("%Y-%m-%d %H:%M:%S", gmtime())))
        f.write("// Generated by reformat_dc_netlist.py\n\n")

        f.write("module {} (\n".format(module_name))
        [f.write("{},\n".format(i)) for i in inputs]
        [f.write("{},\n".format(o)) for o in outputs[:-1]]
        f.write("{});\n\n".format(outputs[-1]))

        # Inputs
        f.write("// Start PIs\n")
        [f.write("input {};\n".format(i)) for i in inputs]
        f.write("\n")

        # Outputs
        f.write("// Start POs\n")
        [f.write("output {};\n".format(o)) for o in outputs]
        f.write("\n")

        # Wires
        f.write("// Start wires\n")
        [f.write("wire {};\n".format(i)) for i in inputs]
        [f.write("wire {};\n".format(o)) for o in outputs]
        [f.write("wire {};\n".format(w)) for w in wires]
        f.write("\n")

        [f.write(_ + "\n") for _ in new_lines[4:-1]]
        f.write("\nendmodule\n")

if __name__ == '__main__':
    """ Test """
    def parse_cl():
        import argparse
        parser = argparse.ArgumentParser(description='A Verilog parser.')
        parser.add_argument('-i', dest='src', required=True)
        parser.add_argument('-o', dest='dest', required=False, default="out.v")
        opt = parser.parse_args()
        return opt

    opt = parse_cl()
    read_verilog(opt.src, opt.dest)
